//k近邻问题的快速解法
//详情请见https://www.cnblogs.com/hfang/p/16396506.html
#include<iostream>
#include<cstdio>
#include<algorithm>
#include<cmath>
#include<cstring>
using namespace std;
const int maxn = 4000 + 10 ;
const int maxk = 400 + 10 ;
struct val
{
    int pos;
    double v;
}map[maxn][maxn];
struct Node
{
    double x,y;
}p[maxn];
int n;
double lens(int a,int b){return sqrt((p[a].x-p[b].x)*(p[a].x-p[b].x)+(p[a].y-p[b].y)*(p[a].y-p[b].y));}
bool cmp(val a,val b){return a.v<b.v;}
bool vis[maxn];
int num=0;
bool new_map[maxn][maxn];
void dfs(int u)
{
    for(int i=1;i<=n;i++)
    {
        if(!new_map[u][i]) continue;
        if(vis[i]) continue;
        vis[i]=1;
        num++;
        dfs(i);
    }
}
bool judge(int k)
{
    num=0;
    memset(vis,0,sizeof(vis));
    memset(new_map,0,sizeof(new_map));
    for(int i=1;i<=n;i++)
        for(int j=2;j<=k+1;j++)
            new_map[i][map[i][j].pos]=1;
    for(int i=1;i<=n;i++)
        for(int j=1;j<i;j++)
            if(new_map[i][j] && new_map[j][i]) continue;
            else new_map[i][j]=0,new_map[j][i]=0;
    dfs(1);
//    cout<<num<<endl;
    if(num==n) return true;
    return false;
}
void QuickSort(int pos,int l,int r){    //快排 
    if(l>=r){    //若待排序序列只有一个元素，返回空 
        return ;
    }
    int i=l;    //i作为指针从左向右扫描 
    int j=r;    //j作为指针从右向左扫描
    val key=map[pos][l];//第一个数作为基准数 
    while(i<j){
        while(map[pos][j].v>=key.v&&i<j){    //从右边找小于基准数的元素 （此处由于j值可能会变，所以仍需判断i是否小于j） 
            j--;    //找不到则j减一 
        }
        map[pos][i]=map[pos][j];    //找到则赋值 
        while(map[pos][i].v<=key.v&&i<j){    //从左边找大于基准数的元素 
            i++;    //找不到则i加一 
        }
        map[pos][j]=map[pos][i];    //找到则赋值 
    }
    map[pos][i]=key;    //当i和j相遇，将基准元素赋值到指针i处 
    QuickSort(pos,l,i-1);    //i左边的序列继续递归调用快排 
    QuickSort(pos,i+1,r);    //i右边的序列继续递归调用快排 
}
int main()
{
     cin>>n;
     for(int i=1;i<=n;i++)
         cin>>p[i].x>>p[i].y;//O(n)
     for(int i=1;i<=n;i++)
         for(int j=1;j<=n;j++)
         {
             map[i][j].v=lens(i,j);
             map[i][j].pos=j;
        }//O(n^2)

    for(int i=1;i<=n;i++)
        QuickSort(i,1,n);//O(n^2log(n))
    int l=1,r=min(n-1,400);
    while(l<r)
    {
        int mid=(l+r)>>1;
        if(judge(mid)) r=mid;
        else l=mid+1;
    }//O(log(k)*n)
    cout<<l<<endl;
    return 0;
}

/* 
10
0.13 56.36
19.33 80.87
58.50 47.99
35.03 89.60
82.28 74.66
17.41 85.89
71.05 51.35
30.40 1.50
9.14 36.45
14.73 16.59

3 



80
137.03 395.03
257.24 118.90
618.27 79.44
680.96 833.00
272.41 472.09
205.33 850.18
358.07 78.89
967.38 295.21
394.02 164.37
211.10 823.05
754.02 92.04
891.54 932.65
349.62 401.17
68.94 908.32
432.02 526.20
376.11 543.78
44.28 564.90
338.48 305.95
155.37 1.62
829.65 94.33
6.74 792.05
442.27 252.27
703.60 715.02
56.83 986.66
580.83 398.91
388.44 851.80
376.32 927.49
793.66 454.21
741.72 432.39
118.29 34.33
122.29 578.11
867.49 81.27
537.58 345.77
479.11 637.17
293.16 22.10
982.33 447.25
155.80 799.52
821.65 611.84
22.40 894.04
128.85 896.42
614.52 586.87
222.88 356.36
229.35 96.16
619.77 432.26
78.89 684.99
333.63 172.15
247.96 911.89
749.72 737.17
802.67 430.40
851.22 846.19
80.72 243.63
80.60 316.81
694.42 819.97
617.15 357.83
277.72 976.56
351.66 769.92
509.02 936.61
339.73 711.05
440.29 466.57
14.68 182.41
664.17 500.02
941.77 891.38
350.23 153.66
394.18 647.42
681.63 542.59
533.19 947.94
723.41 300.27
472.43 909.33
253.64 210.09
8.67 200.42
588.85 854.49
299.69 133.70
934.51 687.52
270.46 571.34
292.58 438.28
29.45 801.66
456.74 249.76
75.75 42.73
126.62 460.95
578.45 729.27


6


50
506.56 518.51
531.87 526.32
518.06 506.45
508.59 500.72
502.33 517.71
523.36 538.61
508.59 539.58
534.34 530.32
546.28 527.57
548.54 509.20
527.42 534.53
515.75 525.83
525.10 541.35
517.62 537.30
537.21 522.21
503.22 506.57
519.30 502.08
547.80 532.51
525.83 539.28
536.23 505.82
523.73 541.04
547.78 511.05
517.44 544.70
543.58 520.26
549.34 522.47
50.00 50.00
329.66 473.79
145.77 417.43
242.54 153.10
60.37 436.66
253.59 370.22
228.63 111.51
124.42 378.25
172.57 457.06
271.79 56.41
50.84 383.05
173.77 342.97
156.40 222.56
340.74 323.28
158.56 146.77
26.81 237.01
187.33 403.18
251.63 313.81
222.98 268.40
388.18 291.26
378.38 202.28
336.71 304.18
7.04 174.81
460.21 159.62
184.94 122.49

25
*/